package thkoeln.divekithelper.classDiagram;

import org.junit.jupiter.api.Test;


import static org.junit.jupiter.api.Assertions.assertEquals;

import static thkoeln.divekithelper.classDiagram.DivekitHelperClassDiagramBuilder.*;

public class DivekitHelperClassDiagramBuilderTest {
    @Test
    void eo02Passing(){
        assertEquals(true,
                classDiagram( new ClassDiagramTest("src/main/java/thkoeln/divekithelper/mock/diagrams/E02modifiedPassing.uxf", "src/main/java/thkoeln/divekithelper/mock/diagrams/E02Solution.uxf") )
                    .missingClasses()
                        .message(1, "A Class is missing.")
                        .message(2, "_CLASS_ is missing.")
                    .combine()
                    .wrongClasses()
                        .message(1, "A Class in unnecessary.")
                        .message(2, "_CLASS_ is unnecessary.")
                    .combine()
                    .mismatch("src/main/java/thkoeln/divekithelper/mock/diagrams/Glossary.md","Gesch채ftsobjekt")
                        .message(1, "A Class is only present in the glossary or the diagram but not in both.")
                        .message(2, "_CLASS_ is only present in the glossary or the diagram but not in both.")
                    .combine()
                    .classWrongAttributes()
                        .message(1, "A Class has wrong Attributes.")
                        .message(2, "_CLASS_ has wrong Attributes.")
                    .combine()
                    .missingRelations()
                        .message(1, "A Relation is missing.")
                        .message(2, "_RELATION_ is missing.")
                    .combine()
                    .wrongRelations()
                        .message(1, "A Relation is wrong.")
                        .message(2, "_RELATION_ is wrong.")
                    .combine()
                    .illegalElements()
                        .message(1, "A illegal Element is present.")
                        .message(2, "Class-Diagrams do not allow _ELEMENT_.")
                    .test("E02Passing", "Class-Diagram Test")
                );
    }

    @Test
    void eo02Failing(){
        assertEquals(false,
                classDiagram( new ClassDiagramTest("src/main/java/thkoeln/divekithelper/mock/diagrams/E02modifiedFailing.uxf", "src/main/java/thkoeln/divekithelper/mock/diagrams/E02Solution.uxf") )
                        .missingClasses()
                            .message(1, "A Class is missing.")
                            .message(2, "_CLASS_ is missing.")
                        .combine()
                        .wrongClasses()
                            .message(1, "A Class in unnecessary.")
                            .message(2, "_CLASS_ is unnecessary.")
                        .combine()
                        .mismatch("src/main/java/thkoeln/divekithelper/mock/diagrams/Glossary.md","Gesch채ftsobjekt")
                            .message(1, "A Class is only present in the glossary or the diagram but not in both.")
                            .message(2, "_CLASS_ is only present in the glossary or the diagram but not in both.")
                        .combine()
                        .classWrongAttributes()
                            .message(1, "A Class has wrong Attributes.")
                            .message(2, "_CLASS_ has wrong Attributes.")
                        .combine()
                        .missingRelations()
                            .message(1, "A Relation is missing.")
                            .message(2, "_RELATION_ is missing.")
                        .combine()
                        .wrongRelations()
                            .message(1, "A Relation is wrong.")
                            .message(2, "_RELATION_ is wrong.")
                        .combine()
                        .illegalElements()
                            .message(1, "A illegal Element is present.")
                            .message(2, "Class-Diagrams do not allow _ELEMENT_.")
                        .test("E02Failing", "Class-Diagram Test")
        );
    }

    @Test
    void eo02Failing2(){
        assertEquals(false,
                classDiagram( new ClassDiagramTest("src/main/java/thkoeln/divekithelper/mock/diagrams/E02modifiedFailing2.uxf", "src/main/java/thkoeln/divekithelper/mock/diagrams/E02Solution.uxf") )
                        .missingClasses()
                            .message(1, "A Class is missing.")
                            .message(2, "_CLASS_ is missing.")
                        .combine()
                        .wrongClasses()
                            .message(1, "A Class in unnecessary.")
                            .message(2, "_CLASS_ is unnecessary.")
                        .combine()
                        .mismatch("src/main/java/thkoeln/divekithelper/mock/diagrams/Glossary.md","Gesch채ftsobjekt")
                            .message(1, "A Class is only present in the glossary or the diagram but not in both.")
                            .message(2, "_CLASS_ is only present in the glossary or the diagram but not in both.")
                        .combine()
                        .classWrongAttributes()
                            .message(1, "A Class has wrong Attributes.")
                            .message(2, "_CLASS_ has wrong Attributes.")
                        .combine()
                        .missingRelations()
                            .message(1, "A Relation is missing.")
                            .message(2, "_RELATION_ is missing.")
                        .combine()
                        .wrongRelations()
                            .message(1, "A Relation is wrong.")
                            .message(2, "_RELATION_ is wrong.")
                        .combine()
                        .illegalElements()
                            .message(1, "A illegal Element is present.")
                            .message(2, "Class-Diagrams do not allow _ELEMENT_.")
                        .test("E02Failing2", "Class-Diagram Test")
        );
    }

    @Test
    void eo02FinalFailing(){
        assertEquals(false,
                classDiagram( new ClassDiagramTest("src/main/java/thkoeln/divekithelper/mock/diagrams/E02FinalModifiedFailing.uxf", "src/main/java/thkoeln/divekithelper/mock/diagrams/E02FinalSolution.uxf") )
                        .missingClasses()
                            .message(1, "A Class is missing.")
                            .message(2, "_CLASS_ is missing.")
                        .combine()
                        .wrongClasses()
                            .message(1, "A Class in unnecessary.")
                            .message(2, "_CLASS_ is unnecessary.")
                        .combine()
                        .classWrongAttributes()
                            .message(1, "A Class has wrong Attributes.")
                            .message(2, "_CLASS_ has wrong Attributes.")
                        .combine()
                        .missingRelations()
                            .message(1, "A Relation is missing.")
                            .message(2, "_RELATION_ is missing.")
                        .combine()
                        .wrongRelations()
                            .message(1, "A Relation is wrong.")
                            .message(2, "_RELATION_ is wrong.")
                        .combine()
                        .illegalElements()
                            .message(1, "A illegal Element is present.")
                            .message(2, "Class-Diagrams do not allow _ELEMENT_.")
                        .test("E02FinalFailing", "Class-Diagram Test")
        );
    }


    @Test
    void eo02WrongResourcePath(){
        //Wrong User-Diagram Path
        assertEquals(false,
                classDiagram( new ClassDiagramTest("src/main/java/thkoeln/divekithelper/mock/diagrams/E03modifiedPassing.uxf", "src/main/java/thkoeln/divekithelper/mock/diagrams/E02Solution.uxf") )
                        .missingClasses()
                            .message(1, "A Class is missing.")
                            .message(2, "_CLASS_ is missing.")
                        .combine()
                        .wrongClasses()
                            .message(1, "A Class in unnecessary.")
                            .message(2, "_CLASS_ is unnecessary.")
                        .combine()
                        .mismatch("src/main/java/thkoeln/divekithelper/mock/diagrams/Glossary.md","Gesch채ftsobjekt")
                            .message(1, "A Class is only present in the glossary or the diagram but not in both.")
                            .message(2, "_CLASS_ is only present in the glossary or the diagram but not in both.")
                        .combine()
                        .classWrongAttributes()
                            .message(1, "A Class has wrong Attributes.")
                            .message(2, "_CLASS_ has wrong Attributes.")
                        .combine()
                        .missingRelations()
                            .message(1, "A Relation is missing.")
                            .message(2, "_RELATION_ is missing.")
                        .combine()
                        .wrongRelations()
                            .message(1, "A Relation is wrong.")
                            .message(2, "_RELATION_ is wrong.")
                        .combine()
                        .illegalElements()
                            .message(1, "A illegal Element is present.")
                            .message(2, "Class-Diagrams do not allow _ELEMENT_.")
                        .test("E02Failing User-Diagram", "Class-Diagram Test")
        );
        //Wrong Solution-Diagram Path
        assertEquals(false,
                classDiagram( new ClassDiagramTest("src/main/java/thkoeln/divekithelper/mock/diagrams/E02modifiedPassing.uxf", "src/main/java/thkoeln/divekithelper/mock/diagrams/E03Solution.uxf") )
                        .missingClasses()
                            .message(1, "A Class is missing.")
                            .message(2, "_CLASS_ is missing.")
                        .combine()
                        .wrongClasses()
                            .message(1, "A Class in unnecessary.")
                            .message(2, "_CLASS_ is unnecessary.")
                        .combine()
                        .mismatch("src/main/java/thkoeln/divekithelper/mock/diagrams/Glossary.md","Gesch채ftsobjekt")
                            .message(1, "A Class is only present in the glossary or the diagram but not in both.")
                            .message(2, "_CLASS_ is only present in the glossary or the diagram but not in both.")
                        .combine()
                        .classWrongAttributes()
                            .message(1, "A Class has wrong Attributes.")
                            .message(2, "_CLASS_ has wrong Attributes.")
                        .combine()
                        .missingRelations()
                            .message(1, "A Relation is missing.")
                            .message(2, "_RELATION_ is missing.")
                        .combine()
                        .wrongRelations()
                            .message(1, "A Relation is wrong.")
                            .message(2, "_RELATION_ is wrong.")
                        .combine()
                        .illegalElements()
                            .message(1, "A illegal Element is present.")
                            .message(2, "Class-Diagrams do not allow _ELEMENT_.")
                        .test("E02Failing Solution-Diagram", "Class-Diagram Test")
        );
        //Wrong Glossary Path
        assertEquals(false,
                classDiagram( new ClassDiagramTest("src/main/java/thkoeln/divekithelper/mock/diagrams/E02modifiedPassing.uxf", "src/main/java/thkoeln/divekithelper/mock/diagrams/E02Solution.uxf") )
                        .missingClasses()
                            .message(1, "A Class is missing.")
                            .message(2, "_CLASS_ is missing.")
                        .combine()
                        .wrongClasses()
                            .message(1, "A Class in unnecessary.")
                            .message(2, "_CLASS_ is unnecessary.")
                        .combine()
                        .mismatch("src/main/java/thkoeln/divekithelper/mock/diagrams/lossary.md","Gesch채ftsobjekt")
                            .message(1, "A Class is only present in the glossary or the diagram but not in both.")
                            .message(2, "_CLASS_ is only present in the glossary or the diagram but not in both.")
                        .combine()
                        .classWrongAttributes()
                            .message(1, "A Class has wrong Attributes.")
                            .message(2, "_CLASS_ has wrong Attributes.")
                        .combine()
                        .missingRelations()
                            .message(1, "A Relation is missing.")
                            .message(2, "_RELATION_ is missing.")
                        .combine()
                        .wrongRelations()
                            .message(1, "A Relation is wrong.")
                            .message(2, "_RELATION_ is wrong.")
                        .combine()
                        .illegalElements()
                            .message(1, "A illegal Element is present.")
                            .message(2, "Class-Diagrams do not allow _ELEMENT_.")
                        .test("E02Failing Glossary", "Class-Diagram Test")
        );
        //Wrong Glossary Column-Name
        assertEquals(false,
                classDiagram( new ClassDiagramTest("src/main/java/thkoeln/divekithelper/mock/diagrams/E02modifiedPassing.uxf", "src/main/java/thkoeln/divekithelper/mock/diagrams/E02Solution.uxf") )
                        .missingClasses()
                            .message(1, "A Class is missing.")
                            .message(2, "_CLASS_ is missing.")
                        .combine()
                        .wrongClasses()
                            .message(1, "A Class in unnecessary.")
                            .message(2, "_CLASS_ is unnecessary.")
                        .combine()
                        .mismatch("src/main/java/thkoeln/divekithelper/mock/diagrams/Glossary.md","G")
                            .message(1, "A Class is only present in the glossary or the diagram but not in both.")
                            .message(2, "_CLASS_ is only present in the glossary or the diagram but not in both.")
                        .combine()
                        .classWrongAttributes()
                            .message(1, "A Class has wrong Attributes.")
                            .message(2, "_CLASS_ has wrong Attributes.")
                        .combine()
                        .missingRelations()
                            .message(1, "A Relation is missing.")
                            .message(2, "_RELATION_ is missing.")
                        .combine()
                        .wrongRelations()
                            .message(1, "A Relation is wrong.")
                            .message(2, "_RELATION_ is wrong.")
                        .combine()
                        .illegalElements()
                            .message(1, "A illegal Element is present.")
                            .message(2, "Class-Diagrams do not allow _ELEMENT_.")
                        .test("E02Failing Glossary Column-Name", "Class-Diagram Test")
        );
    }

}
